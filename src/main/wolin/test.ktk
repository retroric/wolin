package pl.qus.wolin

fun chrout^0xFFD2(char: ubyte^CPU.A)
fun plot^0xFFF0(x: ubyte^CPU.X, y: ubyte^CPU.Y)
var carry: bool^CPU.C

cc65 fun clrscr()
cc65 fun wherex(): ubyte
// fastcall - najprawszy arg idzie przez rejestry
// A dla 8 bitów
// AX dla 16
// A/X/Sreg dla 32 sreg = secondary register na ZP
// unsigned char __fastcall__ bordercolor (unsigned char color);
cc65 fun bordercolor(col: ubyte^CPU.A): ubyte

/*
fun print(what: string) {
    val i = 0
    var char: ubyte = what[i] // BLĄD!!! inference myśli, ze char jest ubyte*
    while (char != 0) {
        chrout(char)
        i++
        char = what[i]
    }
}
*/

fun main() {
    val x: ubyte
    //print("dupa")
    clrscr()
    x = wherex()
    bordercolor(0)
}
